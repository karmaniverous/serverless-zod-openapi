/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ActiveCampaign API v3
 * OpenAPI spec version: 1.0
 */
export interface CreateanaccountRequest {
  account: Account;
}

export interface Account {
  name: string;
  accountUrl: string;
  fields: Field[];
}

export type FieldFieldValue = string | number;

export interface Field {
  customFieldId: number;
  fieldValue: FieldFieldValue;
  fieldCurrency?: string;
}

export interface UpdateanaccountRequest {
  account: Account;
}

export interface CreateanaccountnoteRequest {
  note: Note;
}

export interface Note {
  note: string;
}

export interface UpdateanaccountnoteRequest {
  note: Note;
}

export interface BulkAddFieldValuesRequest {
  fieldOptions: FieldOption[];
}

export interface FieldOption {
  orderid: number;
  value: string;
  label: string;
  isdefault: boolean;
  field: string;
}

export interface UpdateCustomFieldValueForContactRequest {
  fieldValue: FieldValue;
}

export interface FieldValue {
  contact: number;
  field: number;
  value: string;
}

export interface AddFieldRelationshipRequest {
  fieldRel: FieldRel;
}

export interface FieldRel {
  field: number;
  relid: number;
}

export interface AddCustomFieldRequest {
  field: Field2;
}

export interface Field2 {
  title: string;
  descript: string;
  type: string;
  isrequired: boolean;
  perstag: string;
  group: number;
  show_in_list: boolean;
  rows: number;
  cols: number;
  visible: boolean;
  ordernum: number;
}

export interface DeleteCustomFieldRequest {
  field: Field3;
}

export interface Field3 {
  type: string;
  title: string;
  descript: string;
  perstag: string;
  visible: number;
}

export interface UpdateCustomFieldRequest {
  field: Field4;
}

export interface Field4 {
  type: string;
  title: string;
  descript: string;
  perstag: string;
  defval: string;
  show_in_list: number;
  rows: number;
  cols: number;
  visible: number;
  service: string;
  ordernum: number;
}

export interface CreateContactRequest {
  contact: Contact;
}

export interface Contact {
  email: string;
  firstName: string;
  lastName: string;
  phone: string;
}

export interface SyncContactDataRequest {
  contact: Contact1;
}

export interface Contact1 {
  email: string;
  firstName: string;
  lastName: string;
  phone: string;
  fieldValues: FieldValue1[];
}

export interface FieldValue1 {
  field: string;
  value: string;
}

export interface AddcontacttolistRequest {
  contactList: ContactList;
}

export interface ContactList {
  list: number;
  contact: number;
  status: number;
}

export interface BulkImportRequest {
  contacts: Contact2[];
  /** @nullable */
  callback: string | null;
}

export interface Contact2 {
  email: string;
  first_name: string;
  last_name: string;
  phone: string;
  tags: string[];
  fields: Field5[];
  subscribe: Subscribe[];
  /** @nullable */
  unsubscribe: string | null;
}

export interface Field5 {
  id: number;
  value: string;
}

export interface Subscribe {
  listid: number;
}

export interface CreateatagRequest {
  tag: Tag;
}

export interface Tag {
  tag: string;
  tagType: string;
  description: string;
}

export interface UpdateatagRequest {
  tag: Tag;
}

export interface DeleteatagRequest {
  tag: Tag;
}

export interface AddatagtoacontactRequest {
  contactTag: ContactTag;
}

export interface ContactTag {
  contact: string;
  tag: string;
}

export interface CreateListRequest {
  list: List;
}

export interface List {
  name: string;
  stringid: string;
  sender_url: string;
  sender_reminder: string;
  user: number;
}

export interface CreateapublicschemaRequest {
  schema: Schema;
}

export interface Schema {
  slug: string;
  appId: string;
  labels: Labels;
  description: string;
  fields: Field6[];
  relationships: Relationship[];
}

export interface Labels {
  singular: string;
  plural: string;
}

export interface Field6 {
  id: string;
  labels: Labels;
  type: string;
}

export interface Relationship {
  id: string;
  labels: Labels;
  description: string;
  namespace: string;
}

export interface UpdateSchemaRequest {
  schema: Schema1;
}

export interface Schema1 {
  id: string;
  slug: string;
  visibility: string;
  labels: Labels;
  description: string;
  fields: Field7[];
  icons: Icons;
  relationships: Relationship1[];
}

export interface Field7 {
  id: string;
  slug: string;
  labels: Labels;
  type: string;
  required: boolean;
  scale: number;
}

export interface Icons {
  default: string;
}

export interface Relationship1 {
  id: string;
  labels: Labels;
  description: string;
  namespace: string;
  hasMany: boolean;
}

export interface CreateSchemaRequest {
  schema: Schema2;
}

export interface Schema2 {
  labels: Labels;
  slug: string;
  description: string;
  fields: Field8[];
  relationships: Relationship1[];
}

export interface Field8 {
  id: string;
  slug: string;
  labels: Labels;
  type: string;
  scale: number;
  isRequired: boolean;
}

export interface CreatearecordRequest {
  record: Record;
}

export interface Record {
  id: string;
  externalId: string;
  fields: Field9[];
  relationships: Relationships;
}

export interface Field9 {
  id: string;
  value: number;
}

export interface Relationships {
  'primary-contact': number[];
}

export interface CreateGroupRequest {
  group: Group;
}

export interface Group {
  title: string;
}

export interface CreateUserRequest {
  user: User;
}

export interface User {
  username: string;
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  group: number;
}

export interface CreateadealroleRequest {
  title: string;
}

export interface CreateadealRequest {
  deal: Deal;
}

export interface Deal {
  contact: string;
  account: string;
  description: string;
  currency: string;
  group: string;
  owner: string;
  /** @nullable */
  percent: string | null;
  stage: string;
  status: number;
  title: string;
  value: number;
  fields: Field[];
}

export interface CreateadealnoteRequest {
  note: Note;
}

export interface UpdateadealRequest {
  deal: Deal;
}

export interface UpdateadealnoteRequest {
  note: Note;
}

export interface BulkupdatedealownersRequest {
  deals: Deal2[];
}

export interface Deal2 {
  id: number;
  ownerId: number;
}

export interface CreateanewEventNameOnlyRequest {
  eventTrackingEvent: EventTrackingEvent;
}

export interface EventTrackingEvent {
  name: string;
}

export interface Visit {
  email: string;
}

export type BulkImportStatusInfoParams = {
  batchId: string;
};

export type GetContactParams = {
  api_action: string;
  api_key: string;
  api_output: string;
  id: number;
};

export type GetListsParams = {
  limit: number;
};

export type GetalistofrecordsParams = {
  'filters[relationships.primary-contact][eq]': number;
};

export type TrackEventBody = {
  /** Your acct id (see app/settings/tracking) */
  actid: number;
  /** Your event key (required) */
  key: string;
  /** ring to identify your event (required) */
  event: string;
  /** A value you wish to store for the event */
  eventdata: string;
  visit: Visit;
};

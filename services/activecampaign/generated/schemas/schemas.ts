/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * ActiveCampaign API v3
 * OpenAPI spec version: 1.0
 */
import * as axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type { CreateSchemaRequest, UpdateSchemaRequest } from '../api.schemas';

export const getSchemas = () => {
  /**
   * @summary List all schemas
   */
  const listallschemas = <TData = AxiosResponse<null>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/customObjects/schemas`, options).then((res) => {
      if (res.data === '') res.data = null;
      return res as TData;
    });
  };
  /**
   * @summary Create Schema
   */
  const createSchema = <TData = AxiosResponse<null>>(
    createSchemaRequest: CreateSchemaRequest,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default
      .post(`/customObjects/schemas`, createSchemaRequest, options)
      .then((res) => {
        if (res.data === '') res.data = null;
        return res as TData;
      });
  };
  /**
   * @summary Listing records for a Schema
   */
  const listingrecordsforaSchema = <TData = AxiosResponse<unknown>>(
    schemaID: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default.get(`/customObjects/records/${schemaID}`, options);
  };
  /**
   * @summary Update Schema
   */
  const updateSchema = <TData = AxiosResponse<null>>(
    schemaId: string,
    updateSchemaRequest: UpdateSchemaRequest,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default
      .put(`/customObjects/schemas/${schemaId}`, updateSchemaRequest, options)
      .then((res) => {
        if (res.data === '') res.data = null;
        return res as TData;
      });
  };
  /**
   * @summary Get Schema by ID
   */
  const getSchemabyID = <TData = AxiosResponse<null>>(
    schemaId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default
      .get(`/customObjects/schemas/${schemaId}`, options)
      .then((res) => {
        if (res.data === '') res.data = null;
        return res as TData;
      });
  };
  /**
   * @summary Delete Schema
   */
  const deleteSchema = <TData = AxiosResponse<null>>(
    schemaId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.default
      .delete(`/customObjects/schemas/${schemaId}`, options)
      .then((res) => {
        if (res.data === '') res.data = null;
        return res as TData;
      });
  };
  return {
    listallschemas,
    createSchema,
    listingrecordsforaSchema,
    updateSchema,
    getSchemabyID,
    deleteSchema,
  };
};
export type ListallschemasResult = AxiosResponse<null>;
export type CreateSchemaResult = AxiosResponse<null>;
export type ListingrecordsforaSchemaResult = AxiosResponse<unknown>;
export type UpdateSchemaResult = AxiosResponse<null>;
export type GetSchemabyIDResult = AxiosResponse<null>;
export type DeleteSchemaResult = AxiosResponse<null>;

/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ActiveCampaign API v3
 * OpenAPI spec version: 1.0
 */
import type { CreateSchemaRequest, UpdateSchemaRequest } from '../api.schemas';

import { orvalMutator } from '../../../../packages/cached-axios/src/mutator';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getSchemas = () => {
  /**
   * @summary List all schemas
   */
  const listallschemas = (options?: SecondParameter<typeof orvalMutator>) => {
    return orvalMutator<null>(
      { url: `/customObjects/schemas`, method: 'GET' },
      options,
    );
  };
  /**
   * @summary Create Schema
   */
  const createSchema = (
    createSchemaRequest: CreateSchemaRequest,
    options?: SecondParameter<typeof orvalMutator>,
  ) => {
    return orvalMutator<null>(
      {
        url: `/customObjects/schemas`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: createSchemaRequest,
      },
      options,
    );
  };
  /**
   * @summary Listing records for a Schema
   */
  const listingrecordsforaSchema = (
    schemaID: string,
    options?: SecondParameter<typeof orvalMutator>,
  ) => {
    return orvalMutator<unknown>(
      { url: `/customObjects/records/${schemaID}`, method: 'GET' },
      options,
    );
  };
  /**
   * @summary Update Schema
   */
  const updateSchema = (
    schemaId: string,
    updateSchemaRequest: UpdateSchemaRequest,
    options?: SecondParameter<typeof orvalMutator>,
  ) => {
    return orvalMutator<null>(
      {
        url: `/customObjects/schemas/${schemaId}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: updateSchemaRequest,
      },
      options,
    );
  };
  /**
   * @summary Get Schema by ID
   */
  const getSchemabyID = (
    schemaId: string,
    options?: SecondParameter<typeof orvalMutator>,
  ) => {
    return orvalMutator<null>(
      { url: `/customObjects/schemas/${schemaId}`, method: 'GET' },
      options,
    );
  };
  /**
   * @summary Delete Schema
   */
  const deleteSchema = (
    schemaId: string,
    options?: SecondParameter<typeof orvalMutator>,
  ) => {
    return orvalMutator<null>(
      { url: `/customObjects/schemas/${schemaId}`, method: 'DELETE' },
      options,
    );
  };
  return {
    listallschemas,
    createSchema,
    listingrecordsforaSchema,
    updateSchema,
    getSchemabyID,
    deleteSchema,
  };
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type ListallschemasResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSchemas>['listallschemas']>>
>;
export type CreateSchemaResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSchemas>['createSchema']>>
>;
export type ListingrecordsforaSchemaResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSchemas>['listingrecordsforaSchema']>>
>;
export type UpdateSchemaResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSchemas>['updateSchema']>>
>;
export type GetSchemabyIDResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSchemas>['getSchemabyID']>>
>;
export type DeleteSchemaResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSchemas>['deleteSchema']>>
>;

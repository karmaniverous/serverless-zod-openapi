/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ActiveCampaign API v3
 * OpenAPI spec version: 1.0
 */
import { z as zod } from 'zod';

/**
 * @summary Create Schema
 */
export const createSchemaBody = zod.object({
  schema: zod.object({
    labels: zod.object({
      singular: zod.string(),
      plural: zod.string(),
    }),
    slug: zod.string(),
    description: zod.string(),
    fields: zod.array(
      zod.object({
        id: zod.string(),
        slug: zod.string(),
        labels: zod.object({
          singular: zod.string(),
          plural: zod.string(),
        }),
        type: zod.string(),
        scale: zod.number(),
        isRequired: zod.boolean(),
      }),
    ),
    relationships: zod.array(
      zod.object({
        id: zod.string(),
        labels: zod.object({
          singular: zod.string(),
          plural: zod.string(),
        }),
        description: zod.string(),
        namespace: zod.string(),
        hasMany: zod.boolean(),
      }),
    ),
  }),
});

/**
 * @summary Listing records for a Schema
 */
export const listingrecordsforaSchemaParams = zod.object({
  schemaID: zod.string(),
});

/**
 * @summary Update Schema
 */
export const updateSchemaParams = zod.object({
  schemaId: zod.string(),
});

export const updateSchemaBody = zod.object({
  schema: zod.object({
    id: zod.string(),
    slug: zod.string(),
    visibility: zod.string(),
    labels: zod.object({
      singular: zod.string(),
      plural: zod.string(),
    }),
    description: zod.string(),
    fields: zod.array(
      zod.object({
        id: zod.string(),
        slug: zod.string(),
        labels: zod.object({
          singular: zod.string(),
          plural: zod.string(),
        }),
        type: zod.string(),
        required: zod.boolean(),
        scale: zod.number(),
      }),
    ),
    icons: zod.object({
      default: zod.string(),
    }),
    relationships: zod.array(
      zod.object({
        id: zod.string(),
        labels: zod.object({
          singular: zod.string(),
          plural: zod.string(),
        }),
        description: zod.string(),
        namespace: zod.string(),
        hasMany: zod.boolean(),
      }),
    ),
  }),
});

/**
 * @summary Get Schema by ID
 */
export const getSchemabyIDParams = zod.object({
  schemaId: zod.string(),
});

/**
 * @summary Delete Schema
 */
export const deleteSchemaParams = zod.object({
  schemaId: zod.string().describe('Id of schema to be deleted'),
});

/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * ActiveCampaign API v3
 * OpenAPI spec version: 1.0
 */
import type {
  CreateanewEventNameOnlyRequest,
  TrackEventBody,
} from '../api.schemas';

import { orvalMutator } from '../../../../packages/cached-axios/src/mutator';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getSiteEventTracking = () => {
  /**
   * @summary Create a new Event (Name Only)
   */
  const createanewEventNameOnly = (
    createanewEventNameOnlyRequest: CreateanewEventNameOnlyRequest,
    options?: SecondParameter<typeof orvalMutator>,
  ) => {
    return orvalMutator<null>(
      {
        url: `/eventTrackingEvents`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: createanewEventNameOnlyRequest,
      },
      options,
    );
  };
  /**
   * @summary List All Events (Name Only)
   */
  const listAllEventsNameOnly = (
    options?: SecondParameter<typeof orvalMutator>,
  ) => {
    return orvalMutator<null>(
      { url: `/eventTrackingEvents`, method: 'GET' },
      options,
    );
  };
  /**
   * @summary Track Event
   */
  const trackEvent = (
    trackEventBody?: TrackEventBody,
    options?: SecondParameter<typeof orvalMutator>,
  ) => {
    const formUrlEncoded = new URLSearchParams();
    if (trackEventBody?.actid !== undefined) {
      formUrlEncoded.append(`actid`, trackEventBody.actid.toString());
    }
    if (trackEventBody?.key !== undefined) {
      formUrlEncoded.append(`key`, trackEventBody.key);
    }
    if (trackEventBody?.event !== undefined) {
      formUrlEncoded.append(`event`, trackEventBody.event);
    }
    if (trackEventBody?.eventdata !== undefined) {
      formUrlEncoded.append(`eventdata`, trackEventBody.eventdata);
    }
    if (trackEventBody?.visit !== undefined) {
      formUrlEncoded.append(`visit`, JSON.stringify(trackEventBody.visit));
    }

    return orvalMutator<null>(
      {
        url: `/event`,
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        data: formUrlEncoded,
      },
      options,
    );
  };
  return { createanewEventNameOnly, listAllEventsNameOnly, trackEvent };
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type CreateanewEventNameOnlyResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getSiteEventTracking>['createanewEventNameOnly']
    >
  >
>;
export type ListAllEventsNameOnlyResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSiteEventTracking>['listAllEventsNameOnly']>
  >
>;
export type TrackEventResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSiteEventTracking>['trackEvent']>>
>;

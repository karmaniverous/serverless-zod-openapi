/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * ActiveCampaign API v3
 * OpenAPI spec version: 1.0
 */
import type {
  CreateanewEventNameOnlyRequest,
  TrackEventBody,
} from '../api.schemas';

import { orvalMutator } from '../../src/orval.mutator';

export const getSiteEventTracking = () => {
  /**
   * @summary Create a new Event (Name Only)
   */
  const createanewEventNameOnly = (
    createanewEventNameOnlyRequest: CreateanewEventNameOnlyRequest,
  ) => {
    return orvalMutator<null>({
      url: `/eventTrackingEvents`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createanewEventNameOnlyRequest,
    });
  };
  /**
   * @summary List All Events (Name Only)
   */
  const listAllEventsNameOnly = () => {
    return orvalMutator<null>({ url: `/eventTrackingEvents`, method: 'GET' });
  };
  /**
   * @summary Track Event
   */
  const trackEvent = (trackEventBody?: TrackEventBody) => {
    const formUrlEncoded = new URLSearchParams();
    if (trackEventBody?.actid !== undefined) {
      formUrlEncoded.append(`actid`, trackEventBody.actid.toString());
    }
    if (trackEventBody?.key !== undefined) {
      formUrlEncoded.append(`key`, trackEventBody.key);
    }
    if (trackEventBody?.event !== undefined) {
      formUrlEncoded.append(`event`, trackEventBody.event);
    }
    if (trackEventBody?.eventdata !== undefined) {
      formUrlEncoded.append(`eventdata`, trackEventBody.eventdata);
    }
    if (trackEventBody?.visit !== undefined) {
      formUrlEncoded.append(`visit`, JSON.stringify(trackEventBody.visit));
    }

    return orvalMutator<null>({
      url: `/event`,
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      data: formUrlEncoded,
    });
  };
  return { createanewEventNameOnly, listAllEventsNameOnly, trackEvent };
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type CreateanewEventNameOnlyResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getSiteEventTracking>['createanewEventNameOnly']
    >
  >
>;
export type ListAllEventsNameOnlyResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getSiteEventTracking>['listAllEventsNameOnly']>
  >
>;
export type TrackEventResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getSiteEventTracking>['trackEvent']>>
>;

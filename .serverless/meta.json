{
  "C:\\Code\\karmaniverous\\api.johngalt.id\\serverless.ts": {
    "versionFramework": "4.18.0",
    "servicePath": "C:\\Code\\karmaniverous\\api.johngalt.id\\serverless.ts",
    "serviceConfigFileName": "serverless.ts",
    "service": {
      "service": "api-johngalt-id",
      "frameworkVersion": "4",
      "plugins": [
        "serverless-apigateway-log-retention",
        "serverless-deployment-bucket",
        "serverless-domain-manager",
        "serverless-plugin-common-excludes"
      ],
      "package": {
        "individually": true,
        "patterns": [
          "!**/?(*.)test.+(!(.))"
        ],
        "artifactsS3KeyDirname": "serverless/api-johngalt-id/dev/code-artifacts"
      },
      "custom": {
        "apiGatewayLogRetention": {
          "accessLogging": {
            "enabled": true,
            "days": 5
          },
          "executionLogging": {
            "enabled": false
          }
        },
        "customDomain": {
          "autoDomain": true,
          "basePath": "",
          "certificateArn": "arn:aws:acm:us-east-1:343218212471:certificate/8a668260-e9ec-4fde-9b48-d2be8aedb489",
          "domainName": "api.dev.johngalt.id",
          "preserveExternalPathMappings": true
        },
        "deploymentBucket": {
          "accelerate": true,
          "blockPublicAccess": true,
          "versioning": false,
          "accessLog": false
        }
      },
      "stages": {
        "default": {
          "params": {
            "ESB_MINIFY": false,
            "ESB_SOURCEMAP": true,
            "PROFILE": "JGS-SSO",
            "REGION": "ap-southeast-1",
            "SERVICE_NAME": "api-johngalt-id"
          }
        },
        "dev": {
          "params": {
            "DOMAIN_CERTIFICATE_ARN": "arn:aws:acm:us-east-1:343218212471:certificate/8a668260-e9ec-4fde-9b48-d2be8aedb489",
            "DOMAIN_NAME": "api.dev.johngalt.id",
            "STAGE": "dev"
          }
        },
        "prod": {
          "params": {
            "DOMAIN_CERTIFICATE_ARN": "arn:aws:acm:us-east-1:343218212471:certificate/6505cd50-6d57-43f7-a199-02f3e4a08683",
            "DOMAIN_NAME": "api.johngalt.id",
            "STAGE": "prod",
            "ESB_MINIFY": true,
            "ESB_SOURCEMAP": false
          }
        }
      },
      "provider": {
        "apiGateway": {
          "apiKeys": "<REDACTED>",
          "disableDefaultEndpoint": true
        },
        "apiName": "api-johngalt-id",
        "deploymentBucket": "api-johngalt-id-deployment",
        "deploymentMethod": "direct",
        "endpointType": "edge",
        "environment": {
          "REGION": "ap-southeast-1",
          "SERVICE_NAME": "api-johngalt-id",
          "STAGE": "dev"
        },
        "iam": {
          "role": {
            "managedPolicies": [
              "arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy"
            ],
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "*"
                ],
                "Resource": "*"
              }
            ]
          }
        },
        "logRetentionInDays": 5,
        "logs": {
          "lambda": {
            "logFormat": "JSON",
            "logGroup": "/aws/lambda/api-johngalt-id/dev"
          },
          "restApi": {
            "accessLogging": true,
            "executionLogging": false,
            "format": "{ \"accountId\": \"$context.accountId\", \"apiId\": \"$context.apiId\", \"domainName\": \"$context.domainName\", \"domainPrefix\": \"$context.domainPrefix\", \"error\": { \"message\": \"$context.error.message\", \"responseType\": \"$context.error.responseType\" }, \"extendedRequestId\": \"$context.extendedRequestId\", \"httpMethod\": \"$context.httpMethod\", \"identity\" { \"accountId\": \"$context.identity.accountId\", \"apiKey\": \"$context.identity.apiKey\", \"caller\": \"$context.identity.caller\", \"clientCert\": { \"clientCertPem\": \"$context.identity.clientCert.clientCertPem\", \"subjectDN\": \"$context.identity.clientCert.subjectDN\", \"issuerDN\": \"$context.identity.clientCert.issuerDN\", \"serialNumber\": \"$context.identity.clientCert.serialNumber\", \"validity\": { \"notBefore\": \"$context.identity.clientCert.validity.notBefore\", \"notAfter\": \"$context.identity.clientCert.validity.notAfter\" } }, \"sourceIp\": \"$context.identity.sourceIp\", \"user\": \"$context.identity.user\", \"userArn\": \"$context.identity.userArn\", \"userAgent\": \"$context.identity.userAgent\", }, \"integration\": { \"latency\": \"$context.integration.latency\" }, \"path\": \"$context.path\", \"protocol\": \"$context.protocol\", \"requestId\": \"$context.requestId\", \"requestTime\": \"$context.requestTime\", \"requestTimeEpoch\": \"$context.requestTimeEpoch\", \"resourceId\": \"$context.resourceId\", \"resourcePath\": \"$context.resourcePath\", \"stage\": \"$context.stage\", \"responseLatency\": \"$context.responseLatency\", \"responseLength\": \"$context.responseLength\", \"status\": \"$context.status\" }"
          }
        },
        "memorySize": 256,
        "name": "aws",
        "region": "ap-southeast-1",
        "runtime": "nodejs22.x",
        "profile": "JGS-SSO",
        "stackName": "api-johngalt-id-dev",
        "stackTags": {
          "service": "api-johngalt-id",
          "stage": "dev"
        },
        "stage": "dev",
        "tracing": {
          "apiGateway": true,
          "lambda": true
        },
        "versionFunctions": false,
        "deploymentBucketObject": {
          "name": "api-johngalt-id-deployment",
          "serverSideEncryption": "AES256"
        }
      },
      "functions": {
        "fooGet": {
          "handler": "src/endpoints/foo/get/index.handler",
          "environment": {},
          "events": [
            {
              "http": {
                "method": "get",
                "path": "foo"
              }
            }
          ],
          "name": "api-johngalt-id-dev-fooGet"
        }
      },
      "build": {
        "esbuild": {
          "bundle": true,
          "minify": false,
          "sourcemap": true,
          "exclude": [
            "@aws-sdk/*"
          ],
          "target": "node22",
          "platform": "node",
          "define": {}
        }
      }
    },
    "provider": {
      "apiGateway": {
        "apiKeys": "<REDACTED>",
        "disableDefaultEndpoint": true
      },
      "apiName": "api-johngalt-id",
      "deploymentBucket": "api-johngalt-id-deployment",
      "deploymentMethod": "direct",
      "endpointType": "edge",
      "environment": {
        "REGION": "ap-southeast-1",
        "SERVICE_NAME": "api-johngalt-id",
        "STAGE": "dev"
      },
      "iam": {
        "role": {
          "managedPolicies": [
            "arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy"
          ],
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "logRetentionInDays": 5,
      "logs": {
        "lambda": {
          "logFormat": "JSON",
          "logGroup": "/aws/lambda/api-johngalt-id/dev"
        },
        "restApi": {
          "accessLogging": true,
          "executionLogging": false,
          "format": "{ \"accountId\": \"$context.accountId\", \"apiId\": \"$context.apiId\", \"domainName\": \"$context.domainName\", \"domainPrefix\": \"$context.domainPrefix\", \"error\": { \"message\": \"$context.error.message\", \"responseType\": \"$context.error.responseType\" }, \"extendedRequestId\": \"$context.extendedRequestId\", \"httpMethod\": \"$context.httpMethod\", \"identity\" { \"accountId\": \"$context.identity.accountId\", \"apiKey\": \"$context.identity.apiKey\", \"caller\": \"$context.identity.caller\", \"clientCert\": { \"clientCertPem\": \"$context.identity.clientCert.clientCertPem\", \"subjectDN\": \"$context.identity.clientCert.subjectDN\", \"issuerDN\": \"$context.identity.clientCert.issuerDN\", \"serialNumber\": \"$context.identity.clientCert.serialNumber\", \"validity\": { \"notBefore\": \"$context.identity.clientCert.validity.notBefore\", \"notAfter\": \"$context.identity.clientCert.validity.notAfter\" } }, \"sourceIp\": \"$context.identity.sourceIp\", \"user\": \"$context.identity.user\", \"userArn\": \"$context.identity.userArn\", \"userAgent\": \"$context.identity.userAgent\", }, \"integration\": { \"latency\": \"$context.integration.latency\" }, \"path\": \"$context.path\", \"protocol\": \"$context.protocol\", \"requestId\": \"$context.requestId\", \"requestTime\": \"$context.requestTime\", \"requestTimeEpoch\": \"$context.requestTimeEpoch\", \"resourceId\": \"$context.resourceId\", \"resourcePath\": \"$context.resourcePath\", \"stage\": \"$context.stage\", \"responseLatency\": \"$context.responseLatency\", \"responseLength\": \"$context.responseLength\", \"status\": \"$context.status\" }"
        }
      },
      "memorySize": 256,
      "name": "aws",
      "region": "ap-southeast-1",
      "runtime": "nodejs22.x",
      "profile": "JGS-SSO",
      "stackName": "api-johngalt-id-dev",
      "stackTags": {
        "service": "api-johngalt-id",
        "stage": "dev"
      },
      "stage": "dev",
      "tracing": {
        "apiGateway": true,
        "lambda": true
      },
      "versionFunctions": false,
      "deploymentBucketObject": {
        "name": "api-johngalt-id-deployment",
        "serverSideEncryption": "AES256"
      }
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "error": {
      "message": "The specified log group does not exist.",
      "stack": "ServerlessError2: The specified log group does not exist.\n    at file:///C:/Users/jscro/.serverless/releases/4.18.0/package/dist/sf-core.js:1133:36\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async persistentRequest (file:///C:/Users/jscro/.serverless/releases/4.18.0/package/dist/sf-core.js:1132:1959)",
      "code": "AWS_CLOUD_WATCH_LOGS_DESCRIBE_LOG_STREAMS_RESOURCE_NOT_FOUND_EXCEPTION"
    },
    "serviceRawFile": "import type { AWS } from '@serverless/typescript';\r\n\r\nimport fooGet from '@/endpoints/foo/get/serverless';\r\nimport { environment, stages } from '@/serverless/stages';\r\n\r\nconst config: AWS = {\r\n  service: '${param:SERVICE_NAME}',\r\n  frameworkVersion: '4',\r\n  plugins: [\r\n    'serverless-apigateway-log-retention',\r\n    'serverless-deployment-bucket',\r\n    'serverless-domain-manager',\r\n    'serverless-plugin-common-excludes',\r\n  ],\r\n  package: {\r\n    individually: true,\r\n    patterns: ['!**/?(*.)test.+(!(.))'],\r\n  },\r\n  custom: {\r\n    apiGatewayLogRetention: {\r\n      accessLogging: {\r\n        enabled: true,\r\n        days: 5,\r\n      },\r\n      executionLogging: {\r\n        enabled: false,\r\n      },\r\n    },\r\n    customDomain: {\r\n      autoDomain: true,\r\n      basePath: '',\r\n      certificateArn: '${param:DOMAIN_CERTIFICATE_ARN}',\r\n      domainName: '${param:DOMAIN_NAME}',\r\n      preserveExternalPathMappings: true,\r\n    },\r\n    deploymentBucket: {\r\n      accelerate: true,\r\n      blockPublicAccess: true,\r\n    },\r\n  },\r\n  stages,\r\n  provider: {\r\n    apiGateway: {\r\n      apiKeys: ['${param:SERVICE_NAME}-${param:STAGE}'],\r\n      disableDefaultEndpoint: true,\r\n    },\r\n    apiName: '${param:SERVICE_NAME}',\r\n    deploymentBucket: {\r\n      name: '${param:SERVICE_NAME}-deployment',\r\n      serverSideEncryption: 'AES256',\r\n    },\r\n    deploymentMethod: 'direct',\r\n    endpointType: 'edge',\r\n    environment,\r\n    iam: {\r\n      role: {\r\n        managedPolicies: [\r\n          'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy',\r\n        ],\r\n        statements: [{ Effect: 'Allow', Action: '*', Resource: '*' }],\r\n      },\r\n    },\r\n    logRetentionInDays: 5,\r\n    logs: {\r\n      lambda: {\r\n        logFormat: 'JSON',\r\n        logGroup: '/aws/lambda/${param:SERVICE_NAME}/${param:STAGE}',\r\n      },\r\n      restApi: {\r\n        accessLogging: true,\r\n        executionLogging: false,\r\n        format:\r\n          '{ \"accountId\": \"$context.accountId\", \"apiId\": \"$context.apiId\", \"domainName\": \"$context.domainName\", \"domainPrefix\": \"$context.domainPrefix\", \"error\": { \"message\": \"$context.error.message\", \"responseType\": \"$context.error.responseType\" }, \"extendedRequestId\": \"$context.extendedRequestId\", \"httpMethod\": \"$context.httpMethod\", \"identity\" { \"accountId\": \"$context.identity.accountId\", \"apiKey\": \"$context.identity.apiKey\", \"caller\": \"$context.identity.caller\", \"clientCert\": { \"clientCertPem\": \"$context.identity.clientCert.clientCertPem\", \"subjectDN\": \"$context.identity.clientCert.subjectDN\", \"issuerDN\": \"$context.identity.clientCert.issuerDN\", \"serialNumber\": \"$context.identity.clientCert.serialNumber\", \"validity\": { \"notBefore\": \"$context.identity.clientCert.validity.notBefore\", \"notAfter\": \"$context.identity.clientCert.validity.notAfter\" } }, \"sourceIp\": \"$context.identity.sourceIp\", \"user\": \"$context.identity.user\", \"userArn\": \"$context.identity.userArn\", \"userAgent\": \"$context.identity.userAgent\", }, \"integration\": { \"latency\": \"$context.integration.latency\" }, \"path\": \"$context.path\", \"protocol\": \"$context.protocol\", \"requestId\": \"$context.requestId\", \"requestTime\": \"$context.requestTime\", \"requestTimeEpoch\": \"$context.requestTimeEpoch\", \"resourceId\": \"$context.resourceId\", \"resourcePath\": \"$context.resourcePath\", \"stage\": \"$context.stage\", \"responseLatency\": \"$context.responseLatency\", \"responseLength\": \"$context.responseLength\", \"status\": \"$context.status\" }',\r\n      },\r\n    },\r\n    memorySize: 256,\r\n    name: 'aws',\r\n    region: '${param:REGION}' as NonNullable<AWS['provider']['region']>,\r\n    runtime: 'nodejs22.x',\r\n    profile: '${param:PROFILE}',\r\n    stackName: '${param:SERVICE_NAME}-${param:STAGE}',\r\n    stackTags: {\r\n      service: '${param:SERVICE_NAME}',\r\n      stage: '${param:STAGE}',\r\n    },\r\n    stage: '${opt:stage, \"dev\"}',\r\n    tracing: {\r\n      apiGateway: true,\r\n      lambda: true,\r\n    },\r\n    versionFunctions: false,\r\n  },\r\n  functions: {\r\n    // Combine all function definitions into the final document.\r\n    ...fooGet,\r\n  },\r\n  build: {\r\n    esbuild: {\r\n      bundle: true,\r\n      minify: '${param:ESB_MINIFY}' as unknown as boolean,\r\n      sourcemap: '${param:ESB_SOURCEMAP}' as unknown as boolean,\r\n      exclude: ['@aws-sdk/*'],\r\n      target: 'node22',\r\n      platform: 'node',\r\n      define: {\r\n        'require.resolve': undefined,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport default config;\r\n",
    "command": [
      "logs"
    ],
    "options": {
      "function": "fooGet"
    },
    "orgId": "l0Q2v191952CxJH1b2",
    "orgName": "karmaniverous",
    "userId": "FmsPn15dKj3vVl7s3W",
    "userName": "karmaniverous",
    "serviceProviderAwsAccountId": "343218212471",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}